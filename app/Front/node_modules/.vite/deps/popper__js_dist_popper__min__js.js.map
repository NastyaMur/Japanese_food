{
  "version": 3,
  "sources": ["../../popper.js/src/utils/isBrowser.js", "../../popper.js/src/utils/debounce.js", "../../popper.js/src/utils/isFunction.js", "../../popper.js/src/utils/getStyleComputedProperty.js", "../../popper.js/src/utils/getParentNode.js", "../../popper.js/src/utils/getScrollParent.js", "../../popper.js/src/utils/getReferenceNode.js", "../../popper.js/src/utils/isIE.js", "../../popper.js/src/utils/getOffsetParent.js", "../../popper.js/src/utils/isOffsetContainer.js", "../../popper.js/src/utils/getRoot.js", "../../popper.js/src/utils/findCommonOffsetParent.js", "../../popper.js/src/utils/getScroll.js", "../../popper.js/src/utils/includeScroll.js", "../../popper.js/src/utils/getBordersSize.js", "../../popper.js/src/utils/getWindowSizes.js", "../../popper.js/src/utils/getClientRect.js", "../../popper.js/src/utils/getBoundingClientRect.js", "../../popper.js/src/utils/getOffsetRectRelativeToArbitraryNode.js", "../../popper.js/src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js", "../../popper.js/src/utils/isFixed.js", "../../popper.js/src/utils/getFixedPositionOffsetParent.js", "../../popper.js/src/utils/getBoundaries.js", "../../popper.js/src/utils/computeAutoPlacement.js", "../../popper.js/src/utils/getReferenceOffsets.js", "../../popper.js/src/utils/getOuterSizes.js", "../../popper.js/src/utils/getOppositePlacement.js", "../../popper.js/src/utils/getPopperOffsets.js", "../../popper.js/src/utils/find.js", "../../popper.js/src/utils/findIndex.js", "../../popper.js/src/utils/runModifiers.js", "../../popper.js/src/methods/update.js", "../../popper.js/src/utils/isModifierEnabled.js", "../../popper.js/src/utils/getSupportedPropertyName.js", "../../popper.js/src/methods/destroy.js", "../../popper.js/src/utils/getWindow.js", "../../popper.js/src/utils/setupEventListeners.js", "../../popper.js/src/methods/enableEventListeners.js", "../../popper.js/src/utils/removeEventListeners.js", "../../popper.js/src/methods/disableEventListeners.js", "../../popper.js/src/utils/isNumeric.js", "../../popper.js/src/utils/setStyles.js", "../../popper.js/src/utils/setAttributes.js", "../../popper.js/src/modifiers/applyStyle.js", "../../popper.js/src/utils/getRoundedOffsets.js", "../../popper.js/src/modifiers/computeStyle.js", "../../popper.js/src/utils/isModifierRequired.js", "../../popper.js/src/modifiers/arrow.js", "../../popper.js/src/utils/getOppositeVariation.js", "../../popper.js/src/methods/placements.js", "../../popper.js/src/utils/clockwise.js", "../../popper.js/src/modifiers/flip.js", "../../popper.js/src/modifiers/keepTogether.js", "../../popper.js/src/modifiers/offset.js", "../../popper.js/src/modifiers/preventOverflow.js", "../../popper.js/src/modifiers/shift.js", "../../popper.js/src/modifiers/hide.js", "../../popper.js/src/modifiers/inner.js", "../../popper.js/src/modifiers/index.js", "../../popper.js/src/methods/defaults.js", "../../popper.js/src/index.js"],
  "sourcesContent": ["export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n", "import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n", "/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n", "/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n", "/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n", "/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n", "import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n", "import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n", "/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n", "import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n", "/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n", "import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n", "/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n", "import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n", "/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n", "import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n", "import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n", "import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n", "import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n", "import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n", "/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n", "/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n", "import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n", "/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n", "import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n", "import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n", "import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n", "/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n", "/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n", "import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n", "/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n", "import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n", "import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n", "import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n", "import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n", "/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n", "import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n", "/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n", "import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n", "/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n", "import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n", "import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n", "import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n", "/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n", "/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n", "import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n", "import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n", "/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n", "import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n", "import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n", "/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n", "import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n", "import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n", "import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n", "import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n", "// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"],
  "mappings": "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",
  "names": ["window", "document", "navigator", "longerTimeoutBrowsers", "i", "length", "isBrowser", "userAgent", "indexOf", "e", "called", "t", "Promise", "resolve", "then", "scheduled", "o", "supportsMicroTasks", "functionToCheck", "getType", "toString", "call", "element", "nodeType", "ownerDocument", "defaultView", "css", "getComputedStyle", "property", "nodeName", "parentNode", "host", "body", "overflow", "overflowX", "overflowY", "getStyleComputedProperty", "test", "getScrollParent", "getParentNode", "reference", "referenceNode", "isIE11", "MSInputMethodContext", "documentMode", "isIE10", "version", "documentElement", "noOffsetParent", "isIE", "offsetParent", "nextElementSibling", "n", "getOffsetParent", "firstElementChild", "node", "getRoot", "element1", "element2", "order", "compareDocumentPosition", "Node", "DOCUMENT_POSITION_FOLLOWING", "start", "end", "range", "createRange", "setStart", "r", "setEnd", "commonAncestorContainer", "contains", "isOffsetContainer", "element1root", "findCommonOffsetParent", "side", "upperSide", "html", "scrollingElement", "subtract", "scrollTop", "getScroll", "scrollLeft", "modifier", "top", "bottom", "left", "right", "sideA", "axis", "sideB", "parseFloat", "styles", "Math", "max", "parseInt", "computedStyle", "getSize", "offsets", "width", "height", "rect", "getBoundingClientRect", "result", "sizes", "getWindowSizes", "clientWidth", "clientHeight", "horizScrollbar", "offsetWidth", "vertScrollbar", "offsetHeight", "getBordersSize", "s", "getClientRect", "fixedPosition", "runIsIE", "isHTML", "parent", "childrenRect", "parentRect", "scrollParent", "borderTopWidth", "borderLeftWidth", "marginTop", "u", "marginLeft", "includeScroll", "excludeScroll", "relativeOffset", "getOffsetRectRelativeToArbitraryNode", "innerWidth", "innerHeight", "offset", "p", "isFixed", "parentElement", "el", "boundaries", "getFixedPositionOffsetParent", "getReferenceNode", "boundariesElement", "getViewportOffsetRectRelativeToArtbitraryNode", "boundariesNode", "popper", "d", "padding", "isPaddingNumber", "placement", "getBoundaries", "rects", "refRect", "sortedAreas", "Object", "keys", "map", "key", "getArea", "sort", "b", "area", "a", "filteredAreas", "filter", "computedPlacement", "variation", "split", "l", "commonOffsetParent", "x", "marginBottom", "y", "marginRight", "hash", "replace", "matched", "popperRect", "getOuterSizes", "popperOffsets", "isHoriz", "mainSide", "secondarySide", "measurement", "secondaryMeasurement", "referenceOffsets", "getOppositePlacement", "Array", "prototype", "find", "arr", "findIndex", "cur", "match", "obj", "modifiersToRun", "ends", "modifiers", "slice", "forEach", "warn", "fn", "enabled", "isFunction", "data", "state", "isDestroyed", "getReferenceOffsets", "options", "positionFixed", "computeAutoPlacement", "flip", "originalPlacement", "getPopperOffsets", "position", "runModifiers", "isCreated", "onUpdate", "onCreate", "some", "name", "prefixes", "upperProp", "charAt", "toUpperCase", "prefix", "toCheck", "style", "isModifierEnabled", "removeAttribute", "willChange", "getSupportedPropertyName", "disableEventListeners", "removeOnDestroy", "removeChild", "isBody", "target", "addEventListener", "passive", "push", "updateBound", "scrollElement", "scrollParents", "eventsEnabled", "setupEventListeners", "scheduleUpdate", "removeEventListener", "removeEventListeners", "isNaN", "isFinite", "prop", "unit", "isNumeric", "value", "attributes", "setAttribute", "instance", "arrowElement", "arrowStyles", "round", "floor", "noRound", "v", "referenceWidth", "popperWidth", "isVertical", "isVariation", "horizontalToInteger", "verticalToInteger", "bothOddWidth", "isFirefox", "legacyGpuAccelerationOption", "gpuAcceleration", "offsetParentRect", "getRoundedOffsets", "devicePixelRatio", "prefixedProperty", "g", "f", "m", "invertTop", "invertLeft", "arrow", "requesting", "isRequired", "requested", "isModifierRequired", "querySelector", "len", "sideCapitalized", "toLowerCase", "altSide", "opSide", "arrowElementSize", "center", "popperMarginSide", "popperBorderSide", "sideValue", "min", "validPlacements", "placements", "counter", "index", "concat", "reverse", "BEHAVIORS", "flipped", "placementOpposite", "flipOrder", "behavior", "FLIP", "CLOCKWISE", "clockwise", "COUNTERCLOCKWISE", "refOffsets", "overlapsRef", "overflowsLeft", "overflowsRight", "overflowsTop", "overflowsBottom", "overflowsBoundaries", "flippedVariationByRef", "flipVariations", "w", "flippedVariationByContent", "flipVariationsByContent", "flippedVariation", "getOppositeVariation", "str", "size", "useHeight", "fragments", "frag", "trim", "divider", "search", "splitRegex", "ops", "mergeWithPrevious", "op", "reduce", "toValue", "index2", "basePlacement", "parseOffset", "transformProp", "popperStyles", "priority", "check", "escapeWithReference", "shiftvariation", "shiftOffsets", "bound", "hide", "subtractLength", "requestAnimationFrame", "update", "debounce", "bind", "Popper", "Defaults", "jquery", "modifierOptions", "onLoad", "enableEventListeners", "destroy", "Utils", "global", "PopperUtils"]
}
